{"version":3,"sources":["components/Header/Header.js","components/Card/Card.js","App.js","serviceWorker.js","index.js"],"names":["Header","score","msg","className","Card","clickHandler","id","img","name","src","alt","onClick","App","handleClick","state","paintingsState","paintings","paintingClicked","filter","painting","clicked","resetState","shufflePaintings","setState","sort","a","b","Math","random","forEach","this","map","key","Component","Boolean","window","location","hostname","match","ReactDOM","render","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister"],"mappings":"yyFAYeA,MAVf,YAAiC,IAAfC,EAAc,EAAdA,MAAOC,EAAO,EAAPA,IACvB,OACE,yBAAKC,UAAU,aACb,yFACA,sCAAYF,GACZ,4BAAKC,KCGIE,MARf,YAAgD,IAAhCC,EAA+B,EAA/BA,aAAcC,EAAiB,EAAjBA,GAAIC,EAAa,EAAbA,IAAKC,EAAQ,EAARA,KACrC,OACE,yBAAKL,UAAU,2BACb,yBAAKM,IAAKF,EAAKG,IAAKF,EAAMG,QAAS,kBAAMN,EAAaC,QC2E7CM,E,YAxEb,aAAe,IAAD,8BACZ,+CAaFC,YAAc,SAAAP,GACZ,IAAIL,EAAQ,EAAKa,MAAMb,MACnBC,EAAM,EAAKY,MAAMZ,IACfa,EAAiB,EAAKD,MAAME,UAE5BC,EAAkBF,EAAeG,QACrC,SAAAC,GAAQ,OAAIA,EAASb,KAAOA,KAE1BW,EAAgB,GAAGG,SACrBnB,EAAQ,EACR,EAAKoB,aACLnB,EAAM,8BAENe,EAAgB,GAAGG,SAAU,EAC7B,EAAKE,iBAAiBP,GACtBd,IACAC,EAAM,uBAIR,EAAKqB,SAAS,CAAER,iBAAgBd,QAAOC,SAlC3B,EAqCdoB,iBAAmB,SAAAN,GACjBA,EAAUQ,MAAK,SAACC,EAAGC,GAAJ,MAAU,GAAMC,KAAKC,aAtCxB,EAyCdP,WAAa,SAAAf,GACY,EAAKQ,MAAME,UACnBa,SAAQ,SAAAV,GACrBA,EAASC,SAAU,KAErB,EAAKG,SAAS,CAAEtB,MAAO,KA5CvB,EAAKa,MAAQ,CACXE,UAAWA,EACXf,MAAO,EACPC,IAAK,6BALK,E,iFAUZ4B,KAAKR,iBAAiBN,GACtBc,KAAKP,SAASP,K,+BAsCN,IAAD,SAC2Bc,KAAKhB,MAA/BE,EADD,EACCA,UAAWf,EADZ,EACYA,MAAOC,EADnB,EACmBA,IAC1B,OACE,yBAAKC,UAAU,OACb,kBAAC,EAAD,CAAQF,MAAOA,EAAOC,IAAKA,IAE3B,yBAAKC,UAAU,2CACZa,EAAUe,KAAI,gBAAGzB,EAAH,EAAGA,GAAIE,EAAP,EAAOA,KAAMD,EAAb,EAAaA,IAAKa,EAAlB,EAAkBA,QAAlB,OACb,kBAAC,EAAD,CACEY,IAAK1B,EACLA,GAAIA,EACJE,KAAMA,EACND,IAAKA,EACLF,aAAc,EAAKQ,YACnBO,QAASA,a,GAhELa,aCKEC,QACW,cAA7BC,OAAOC,SAASC,UAEe,UAA7BF,OAAOC,SAASC,UAEhBF,OAAOC,SAASC,SAASC,MACvB,2DCZNC,IAASC,OAAO,kBAAC,EAAD,MAASC,SAASC,eAAe,SD6H3C,kBAAmBC,WACrBA,UAAUC,cAAcC,MAAMC,MAAK,SAAAC,GACjCA,EAAaC,kB","file":"static/js/main.8cc621bd.chunk.js","sourcesContent":["import React from \"react\";\r\n\r\nfunction Header({ score, msg }) {\r\n  return (\r\n    <div className=\"jumbotron\">\r\n      <h1>You have to click every image, but don't repeat yourself!</h1>\r\n      <h2>Score: {score}</h2>\r\n      <h3>{msg}</h3>\r\n    </div>\r\n  );\r\n}\r\n\r\nexport default Header;\r\n","import React from \"react\";\r\n\r\nfunction Card({ clickHandler, id, img, name }) {\r\n  return (\r\n    <div className=\"card-holder p-2 my-auto\">\r\n      <img src={img} alt={name} onClick={() => clickHandler(id)} />\r\n    </div>\r\n  );\r\n}\r\n\r\nexport default Card;\r\n","import React, { Component } from \"react\";\nimport \"./App.css\";\nimport paintings from \"./paintings.json\";\n\nimport Header from \"./components/Header\";\nimport Card from \"./components/Card\";\n\nclass App extends Component {\n  constructor() {\n    super();\n    this.state = {\n      paintings: paintings,\n      score: 0,\n      msg: \"Press a painting to start\"\n    };\n  }\n\n  componentDidMount() {\n    this.shufflePaintings(paintings);\n    this.setState(paintings);\n  }\n\n  handleClick = id => {\n    let score = this.state.score;\n    let msg = this.state.msg;\n    const paintingsState = this.state.paintings;\n    // Stores the painting clicked\n    const paintingClicked = paintingsState.filter(\n      painting => painting.id === id\n    );\n    if (paintingClicked[0].clicked) {\n      score = 0;\n      this.resetState();\n      msg = \"Press a painting to start\";\n    } else {\n      paintingClicked[0].clicked = true;\n      this.shufflePaintings(paintingsState);\n      score++;\n      msg = \"You are doing great\";\n    }\n\n    // Changes the state of clicked to true and shuffles the paintings\n    this.setState({ paintingsState, score, msg });\n  };\n\n  shufflePaintings = paintings => {\n    paintings.sort((a, b) => 0.5 - Math.random());\n  };\n\n  resetState = id => {\n    const paintingsState = this.state.paintings;\n    paintingsState.forEach(painting => {\n      painting.clicked = false;\n    });\n    this.setState({ score: 0 });\n  };\n\n  render() {\n    const { paintings, score, msg } = this.state;\n    return (\n      <div className=\"App\">\n        <Header score={score} msg={msg} />\n\n        <div className=\"d-flex flex-wrap justify-content-center\">\n          {paintings.map(({ id, name, img, clicked }) => (\n            <Card\n              key={id}\n              id={id}\n              name={name}\n              img={img}\n              clickHandler={this.handleClick}\n              clicked={clicked}\n            />\n          ))}\n        </div>\n      </div>\n    );\n  }\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' }\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(<App />, document.getElementById('root'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}